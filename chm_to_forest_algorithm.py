# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CHMtoForest
                                 A QGIS plugin
 Converts a CHM to a vector layer with forest polygons according to various definitions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-27
        copyright            : (C) 2023 by Francesco Pirotti - CIRGEO/TESAF University of Padova
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti - CIRGEO/TESAF University of Padova'
__date__ = '2023-05-27'
__copyright__ = '(C) 2023 by Francesco Pirotti - CIRGEO/TESAF University of Padova'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import math
import shutil
import tempfile

from qgis import processing
from qgis.PyQt.QtGui import QIcon
from qgis.core import *
from qgis.utils import *
import inspect
import numpy as np
import sys
import os

dirname, filename = os.path.split(os.path.abspath(__file__))
sys.path.append(dirname)
import cv2 as cv


class CHMtoForestAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    tmpdir = ''
    OUTPUT = 'OUTPUT'
    OUTPUT2 = 'OUTPUT2'
    INPUT = 'INPUT'
    PERC_COVER = 'PERC_COVER'
    MIN_AREA = 'MIN_AREA'
    MIN_LARGH = 'MIN_LARGH'
    ALTEZZA_MIN_ALBERO = 'ALTEZZA_MIN_ALBERO'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input CHM')
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output layer OPEN')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT2,
                self.tr('Output layer CLOSE')
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ALTEZZA_MIN_ALBERO,
                self.tr('Soglia altezza albero'),
                defaultValue=2.0
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.PERC_COVER,
                self.tr('Copertura percentuale '),
                defaultValue=20.0
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MIN_AREA,
                self.tr('Area minima'),
                defaultValue=2000.0
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.MIN_LARGH,
                self.tr('Larghezza minima'),
                defaultValue=20.0
            )
        )

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'logo.png')))
        return icon

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        temppathfile = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
        temppathfile2 = self.parameterAsFileOutput(parameters, self.OUTPUT2, context)
        minarea = self.parameterAsDouble(parameters, self.MIN_AREA, context)
        minlargh = self.parameterAsDouble(parameters, self.MIN_LARGH, context)
        ksize = math.sqrt(minarea / 3.14)
        minalt = self.parameterAsDouble(parameters, self.ALTEZZA_MIN_ALBERO, context)

        feedback.setProgressText("Preparo il raster in output")
        pipe = QgsRasterPipe()
        sdp = source.dataProvider()
        pipe.set(sdp.clone())

        rasterWriter = QgsRasterFileWriter(temppathfile)
        error = rasterWriter.writeRaster(pipe, sdp.xSize(), sdp.ySize(), sdp.extent(), sdp.crs())

        if error == QgsRasterFileWriter.NoError:
            print("Output preparato con successo!")
        else:
            feedback.reportError('Non sono riuscito ad implementare il raster nuovo OPENING - ' + str(temppathfile))
            return {}

        rasterWriter2 = QgsRasterFileWriter(temppathfile2)
        error2 = rasterWriter2.writeRaster(pipe, sdp.xSize(), sdp.ySize(), sdp.extent(), sdp.crs())

        if error2 == QgsRasterFileWriter.NoError:
            print("Output preparato con successo!")
        else:
            feedback.reportError('Non sono riuscito ad implementare il raster nuovo CLOSING  - ' + str(temppathfile))
            return {}

        tempRasterLayer = QgsRasterLayer(temppathfile)
        provider = tempRasterLayer.dataProvider()

        tempRasterLayer2 = QgsRasterLayer(temppathfile2)
        provider2 = tempRasterLayer2.dataProvider()

        feedback.setProgressText("Creo il raster temporaneo " + provider.name() + " di tipo " +
                                 str(source.dataProvider().bandScale(0)) + " -- - " + str(
            provider.xSize()) + " x " + str(provider.ySize()))

        if provider is None:
            feedback.reportError('Cannot find or read ' + tempRasterLayer.source())
            return {}

        if provider2 is None:
            feedback.reportError('Cannot find or read ' + tempRasterLayer2.source())
            return {}


        feedback.setProgressText("Leggo il raster")
        img = cv.imread(source.source(), cv.IMREAD_LOAD_GDAL | cv.IMREAD_ANYDEPTH)

        if img is None:
            feedback.reportError('Errore nella lettura con opencv ' + source.source())
            return {}

        block = provider.block(1, provider.extent(), provider.xSize(), provider.ySize())
        block2 = provider2.block(1, provider2.extent(), provider2.xSize(), provider2.ySize())

        # Check for cancelation
        if feedback.isCanceled():
            return {}
        feedback.setProgressText("Dimensione immagine: " + ' x '.join(map(str, img.shape)))
        feedback.setProgressText("Applico soglia di altezza di : " + str(minalt) + ' metri ')
        # binarize the image
        binr = cv.threshold(img, minalt, 255, cv.THRESH_BINARY)[1]

        # Check for cancelation
        if feedback.isCanceled():
            return {}

        feedback.setProgressText("Creo un kernel di : " + str(round(ksize, 3)) +
                                 '(' + str(int(ksize)) +
                                 ') metri  e larghezza minima ' + str(minlargh))

        kernel = cv.getStructuringElement(cv.MORPH_ELLIPSE, (int(ksize), int(ksize)))
        closing = cv.morphologyEx(binr, cv.MORPH_CLOSE, kernel)
        # Check for cancelation
        if feedback.isCanceled():
            return {}

        opening = cv.morphologyEx(binr, cv.MORPH_OPEN, kernel)
        # Check for cancelation
        if feedback.isCanceled():
            return {}

        data = bytearray(bytes(opening))
        data2 = bytearray(bytes(closing))
        block.setData(data)
        block2.setData(data2)

        provider.setEditable(True)
        writeok = provider.writeBlock(block, 1)
        provider.setEditable(False)

        provider2.setEditable(True)
        writeok2 = provider2.writeBlock(block2, 1)
        provider2.setEditable(False)

        if writeok:
            feedback.setProgressText("Successo nella scrittura del dato")
        else:
            feedback.setProgressText("Non sono riuscito a scrivere il blocco raster")
            return {}

        out_rlayer = QgsRasterLayer(temppathfile, "Area Foresta opening")
        out_rlayer2 = QgsRasterLayer(temppathfile2, "Area Foresta closing")
        QgsProject.instance().addMapLayer(out_rlayer)
        QgsProject.instance().addMapLayer(out_rlayer2)
        self.iface.mapCanvas().refresh()
        qgis_process
        run

        feedback.setProgressText(tempRasterLayer.source())
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: temppathfile}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'CHM => Forest'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CHMtoForestAlgorithm()
